{"version":3,"sources":["component/NavBar/index.js","component/NavBar/BlogTitle.js","component/NavBar/BlogButton.js","component/Blog/index.js","component/BlogList/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","this","props","brandName","onClick","onChange","React","Component","BlogTitle","blogTitle","BlogButton","title","Blog","state","article","getData","url","axios","get","then","res","post","data","console","log","setState","keywords","map","x","dangerouslySetInnerHTML","__html","BlogItem","n","BlogList","blogList","info","blogs","i","App","blogMeta","undefined","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc297620.chunk.js","sourcesContent":["import React from \"react\";\nimport './navbar.css';\n\nexport default class NavBar extends React.Component {\n    render() {\n        return (\n            <div className=\"nav-container\">\n                <div className=\"nav-bg\" />\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-10 nav-brand\">\n                            { this.props.brandName }\n                        </div>\n                        <div className=\"col-2 nav-button\" onClick={ this.props.onChange }>\n                            home\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\";\n\nexport default function BlogTitle({ blogTitle }) {\n    return (\n        <span className=\"blog-main-header\">\n            { blogTitle }\n        </span>\n    )\n}\n","import React from \"react\";\n\nexport default function BlogButton({ title, onClick }) {\n    return (\n        <div className=\"blog-button\">\n            { title }\n        </div>\n    )\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport BlogTitle from \"../NavBar/BlogTitle\";\nimport BlogButton from \"../NavBar/BlogButton\";\nimport './blog.css';\n\nexport default class Blog extends React.Component {\n    getData(url) {\n        axios.get(url)\n            .then(res => {\n                axios.post(`https://api.github.com/markdown`, {\n                    \"text\": res.data,\n                    \"mode\": \"gfm\",\n                    \"context\": \"github/gollum\"\n                })\n                    .then(res => {\n                        console.log(res.data);\n\n                        this.setState({\n                            article: res.data\n                        });\n                    })\n            });\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            article: \"\"\n        };\n\n        this.getData(this.props.url);\n    }\n    render() {\n        return (\n            <div className=\"container blog-container\">\n                <div className=\"blog-inner--container\">\n\n                    <div className=\"blog-main-header-container\">\n                        <BlogTitle blogTitle={ this.props.title }/>\n                        <div className=\"blog-button-container\">\n                            { this.props.keywords.map(x => <BlogButton title={ x } />) }\n                        </div>\n                    </div>\n\n                    <div dangerouslySetInnerHTML={{__html: this.state.article}}>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport './bloglist.css';\nimport axios from \"axios\";\n\nfunction BlogItem({ n, title, onClick }) {\n    return (\n        <div className=\"blog-item\">\n            <span className=\"number\"> { n } </span>\n            <span className=\"a\" onClick={ onClick } >{ title }</span>\n        </div>\n    )\n}\n\nexport default class BlogList extends React.Component {\n    getData() {\n        axios.get(\"https://raw.githubusercontent.com/rational-kunal/article/master/index.json\")\n            .then(res => {\n                console.info(res.data);\n                this.setState({\n                    blogList: res.data.blogs\n                })\n            })\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            blogList: []\n        };\n\n        this.getData();\n    }\n\n    render() {\n        return (\n            <div className=\"container blog-container\">\n\n                <blockquote>\n                    little info anbout me\n                </blockquote>\n\n                <div className=\"blog-inner-container\">\n\n                    { this.state.blogList.map((x, i) =>\n                        <BlogItem\n                            n={ i }\n                            title={ x.title }\n                            keywords={ x.keywords }\n                            url={ x.url }\n                            onClick={ () => this.props.onChange(\n                                {title: x.title, keywords: x.keywords, url: x.url}\n                            ) }\n                        />) }\n\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport NavBar from \"./component/NavBar\";\nimport Blog from \"./component/Blog\";\nimport BlogList from \"./component/BlogList\";\n\nconst brandName = \"camel_case\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            blogMeta : undefined\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                <NavBar\n                    brandName={ brandName }\n                    onChange={ x=>this.setState({ blogMeta: undefined }) }\n                />\n\n                { this.state.blogMeta ?\n                    <Blog\n                        title={ this.state.blogMeta.title }\n                        keywords={ this.state.blogMeta.keywords }\n                        url={ this.state.blogMeta.url }\n                    /> :\n                    <BlogList\n                        onChange={ x=>this.setState({ blogMeta: x }) }\n                    />\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}